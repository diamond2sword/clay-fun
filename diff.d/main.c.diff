73,79c73,80
< const Clay_Color COLOR_WHITE = (Clay_Color) {255, 255, 255, 255};
< const Clay_Color COLOR_BLACK = (Clay_Color) {0, 0, 0, 255};
< const Clay_Color COLOR_RED = (Clay_Color) {255, 0, 0, 255};
< const Clay_Color COLOR_GREEN = (Clay_Color) {0, 255, 0, 255};
< const Clay_Color COLOR_YELLOW = (Clay_Color) {255, 255, 0, 255};
< const Clay_Color COLOR_NONE = (Clay_Color) {0, 0, 0, 0};
< const Clay_Color COLOR_BLUE = (Clay_Color) {0, 0, 255, 255};
---
> #define SET_COLOR(name, ...) const Clay_Color COLOR_##name = (Clay_Color) {__VA_ARGS__}
> SET_COLOR(WHITE, 255, 255, 255, 255);
> SET_COLOR(BLACK, 0, 0, 0, 255);
> SET_COLOR(RED, 255, 0, 0, 255);
> SET_COLOR(GREEN, 0, 255, 0, 255);
> SET_COLOR(YELLOW, 255, 255, 0, 255);
> SET_COLOR(NONE, 0, 0, 0, 0);
> SET_COLOR(BLUE, 0, 0, 255, 255);
84a86,87
> 
> 
104c107
< #define CLAY_CLICK_HANDLER(name, __VA_ARGS__1, __VA_ARGS__2, __VA_ARGS__3) \
---
> #define CLAY_CLICK_HANDLER(name, __VA_ARGS__1, __VA_ARGS__2, __VA_ARGS__3, __VA_ARGS__4, __VA_ARGS__5) \
107a111
> 	bool clickHandler_##name##_inTouchStart; \
113a118,125
> 				if (pointerStartLock_waitTime > currentTime) \
> 				{ \
> 					clickHandler_##name##_inTouchStart = true; \
> 				} \
> 				if (!clickHandler_##name##_inTouchStart) \
> 				{ \
> 					return; \
> 				} \
125a138
> 			clickHandler_##name##_inTouchStart = false; \
135a149,154
> 			if (isPointerDown) \
> 			{ \
> 				__VA_ARGS__4 \
> 				return; \
> 			} \
> 			clickHandler_##name##_inTouchStart = false; \
150a170
> 		__VA_ARGS__5 \
166c186,188
< float deltaTime;
---
> bool isPointerDown;
> bool isInterrupted;
> float pointerStartLock_waitTime;
167a190
> float deltaTime;
169d191
< bool isInterrupted;
171,173c193,195
< CLAY_CLICK_HANDLER(tictactoePage, {}, {}, {});
< CLAY_CLICK_HANDLER(end, {}, {}, {});
< CLAY_CLICK_HANDLER(winner, {}, {}, {});
---
> CLAY_CLICK_HANDLER(tictactoePage, {}, {}, {}, {}, {});
> CLAY_CLICK_HANDLER(end, {}, {}, {}, {}, {});
> CLAY_CLICK_HANDLER(winner, {}, {}, {}, {}, {});
174a197,198
> float PLAY_AGAIN_CELL_MARKS_FADE_OUT = 0;
> #define PLAY_AGAIN_CELL_MARKS_FADE_OUT_DURATION 0.5f
176,177c200,206
< 	{if (Clay_PointerOver(clickHandler_playAgain_elementId)) resetBoard();},
< 	{}, {}
---
> 	{
> 		if (Clay_PointerOver(clickHandler_playAgain_elementId))
> 		{
> 			resetBoard();
> 		}
> 	},
> 	{}, {}, {}, {}
180a210,223
> float CELL_MARK_FADE_IN[9] = {0};
> #define CELL_MARK_FADE_IN_DURATION 0.25f
> Clay_Color cellMarkColor(uint8_t cellIndex)
> {
> 	if (BOARD[cellIndex] == ACTIVE_PLAYER_NONE) return COLOR_NONE;
> 	Clay_Color color = BOARD[cellIndex] == ACTIVE_PLAYER_X
> 		? COLOR_PLAYER_X : COLOR_PLAYER_O;
> 	if (CELL_MARK_FADE_IN[cellIndex] > currentTime)
> 	{
> 		const float covered = CELL_MARK_FADE_IN[cellIndex] - currentTime;
> 		color.a = 255 * (1 - covered / CELL_MARK_FADE_IN_DURATION);
> 	}
> 	return color;
> }
182c225,233
< 	{if (Clay_PointerOver(clickHandler_cellMark_elementId)) makeMove(CELL_MARK_INDEX);},
---
> 	{
> 		if (Clay_PointerOver(clickHandler_cellMark_elementId)
> 		&& CELL_MARK_INDEX != -1
> 		&& BOARD[CELL_MARK_INDEX] == ACTIVE_PLAYER_NONE)
> 		{
> 			CELL_MARK_FADE_IN[CELL_MARK_INDEX] = currentTime + CELL_MARK_FADE_IN_DURATION;
> 			makeMove(CELL_MARK_INDEX);
> 		}
> 	},
184c235,237
< 	{if (!clickHandler_tictactoePage_clickPhase) makeMove(CELL_MARK_INDEX);}
---
> 	{if (CLICK_IS(cellMark, NONE) && CELL_MARK_INDEX != -1) makeMove(CELL_MARK_INDEX);},
> 	{},
> 	{}
191c244,246
< 	{CELL_HOVER_INDEX = -1;}
---
> 	{CELL_HOVER_INDEX = -1;},
> 	{CELL_HOVER_INDEX = -1;},
> 	{}
240c295
< 	if (WINNER || MOVE_COUNTER == 9) {
---
> 	if (isGameDone()) {
266,272c321,322
< 		if (BOARD[cellIndex] == ACTIVE_PLAYER_X) {
< 			CLAY_BOX(CLAY_IDI("TictactoeMove", cellIndex), (boxConfig.color.fill=COLOR_PLAYER_X))
< 			{}
< 		} else if (BOARD[cellIndex] == ACTIVE_PLAYER_O) {
< 			CLAY_BOX(CLAY_IDI("TictactoeMove", cellIndex), (boxConfig.color.fill=COLOR_PLAYER_O))
< 			{}
< 		}
---
> 		CLAY_BOX(CLAY_IDI("TictactoeMove", cellIndex), (boxConfig.color.fill=cellMarkColor(cellIndex)))
> 		{}
279c329
< 		CLAY_SIZING_PERCENT(windowSmallSide / windowLongSide), CLAY_SIZING_GROW(0)
---
> 		CLAY_SIZING_PERCENT(windowSmallSide / windowLongSide), CLAY_SIZING_GROW(0),
284c334,335
< 			CLAY_FLOATING()
---
> 			CLAY_FLOATING(),
> 			Clay_OnHover(HandleTictactoeCellInteraction, -1)
324,327d374
< 	windowSmallSide = MIN(windowWidth, windowHeight);
< 	windowLongSide = MAX(windowWidth, windowHeight);
< 	lineWidth = 0.025f * windowSmallSide;
< 	isPortrait = windowWidth < windowHeight;
364c411
< CLAY_WASM_EXPORT("UpdateDrawFrame") Clay_RenderCommandArray UpdateDrawFrame(float width, float height, float mouseWheelX, float mouseWheelY, float mousePositionX, float mousePositionY, bool isTouchDown, bool isMouseDown, bool __isPointerStart, bool __isPointerCancel, bool arrowKeyDownPressedThisFrame, bool arrowKeyUpPressedThisFrame, bool dKeyPressedThisFrame, float __currentTime, float __deltaTime) {
---
> CLAY_WASM_EXPORT("UpdateDrawFrame") Clay_RenderCommandArray UpdateDrawFrame(float width, float height, float mouseWheelX, float mouseWheelY, float mousePositionX, float mousePositionY, bool __isTouchDown, bool __isMouseDown, bool __isPointerStart, bool __isPointerCancel, bool arrowKeyDownPressedThisFrame, bool arrowKeyUpPressedThisFrame, bool dKeyPressedThisFrame, float __currentTime, float __deltaTime) {
366a414
> 	updateAverageDeltaTime();
368a417,418
> 	isPointerDown = __isTouchDown || __isMouseDown;
> 
372c422,423
< 	} else if (isInterrupted)
---
> 	}
> 	else if (isInterrupted)
376,377c427,431
< 	updateAverageDeltaTime();
< 	
---
> 	if (isPointerStart)
> 	{
> 		pointerStartLock_waitTime = currentTime + MAX(0.01f, averageDeltaTime * 2);
> 	}
> 
379a434,438
> 	windowSmallSide = MIN(windowWidth, windowHeight);
> 	windowLongSide = MAX(windowWidth, windowHeight);
> 	lineWidth = 0.025f * windowSmallSide;
> 	isPortrait = windowWidth < windowHeight;
> 
397c456
<     Clay_SetPointerState((Clay_Vector2) {mousePositionX, mousePositionY}, isMouseDown || isTouchDown);
---
>     Clay_SetPointerState((Clay_Vector2) {mousePositionX, mousePositionY}, isPointerDown);
399c458
<     Clay_UpdateScrollContainers(isTouchDown, (Clay_Vector2) {mouseWheelX, mouseWheelY}, deltaTime);
---
>     Clay_UpdateScrollContainers(__isTouchDown, (Clay_Vector2) {mouseWheelX, mouseWheelY}, deltaTime);
