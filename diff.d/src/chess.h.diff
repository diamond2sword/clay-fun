65,67c65,67
< #define isCapitalChar(c) (c >= 'A' && c <= 'Z')
< #define lowerChar(c) (isCapitalChar(c) ? c - ('A' - 'a') : c)
< #define ArrayPair(k, v) [k] = v
---
> #define isCapitalChar(c) ((c) >= 'A' && (c) <= 'Z')
> #define lowerChar(c) (isCapitalChar(c) ? (c) - ('A' - 'a') : (c))
> #define ArrayPair(k, v) [k] = (v)
79,82c79,82
< #define Bitboard_Put(index, side, type) \
< 	BITBOARD[side][type] |= MASK_INDEX(index); 
< #define BITBOARD_PUT(index, sideToken, typeToken) \
< 	Bitboard_Put(index, PIECE_SIDE_INDEX_##sideToken, PIECE_TYPE_INDEX_##typeToken) 
---
> #define BitboardSet_Put(bitboardSet, index, side, type) \
> 	bitboardSet[side][type] |= MASK_INDEX(index)
> #define BITBOARD_SET_PUT(bitboardSet, index, sideToken, typeToken) \
> 	BitboardSet_Put(bitboardSet, index, PIECE_SIDE_INDEX_##sideToken, PIECE_TYPE_INDEX_##typeToken) 
84,88c84,89
< bool Piece_HasSideIndex(uint8_t index, PieceSideIndex side);
< #define Piece_HasTypeIndex(index, type) \
< 	(Piece_IsTypeIndex(type) ? Piece_GetTypeIndex(index) == type : false)
< PieceSideIndex Piece_GetSideIndex(uint8_t index);
< PieceTypeIndex Piece_GetTypeIndex(uint8_t index);
---
> #define Piece_HasSideIndex(bitboardSet, index, side) (Piece_IsSideIndex(side) \
> 	? Piece_GetSideIndex(bitboardSet, index) == side : false)
> #define Piece_HasTypeIndex(bitboardSet, index, type) (Piece_IsTypeIndex(type) \
> 	? Piece_GetTypeIndex(bitboardSet, index) == type : false)
> PieceSideIndex Piece_GetSideIndex(Bitboards_All bitboardSet, uint8_t index);
> PieceTypeIndex Piece_GetTypeIndex(Bitboards_All bitboardSet, uint8_t index);
90,91c91,92
< #define Piece_IsSideIndex(side) (side >= 0 && side < PIECE_SIDE_INDEX_COUNT)
< #define Piece_IsTypeIndex(type) (type >= 0 && type < PIECE_TYPE_INDEX_COUNT)
---
> #define Piece_IsSideIndex(side) ((side >= 0 && side < PIECE_SIDE_INDEX_COUNT) || side == PIECE_SIDE_INDEX_NONE)
> #define Piece_IsTypeIndex(type) ((type >= 0 && type < PIECE_TYPE_INDEX_COUNT) || type == PIECE_TYPE_INDEX_NONE)
99,112c100,118
< #define MASK_INDEX(index) (1ULL << (index))
< #define MASK_ALL (MASK_SIDE(BLACK) | MASK_SIDE(WHITE))
< #define MASK_TYPE(typeToken) Mask_Type(PIECE_TYPE_INDEX_##typeToken)
< #define MASK_PIECE(sideToken, typeToken) \
< 	Mask_Piece(PIECE_SIDE_INDEX_##sideToken, PIECE_TYPE_INDEX_##typeToken)
< #define MASK_SIDE(sideToken) \
< 	(MASK_PIECE(sideToken, KING) | MASK_PIECE(sideToken, QUEEN) | \
< 	 MASK_PIECE(sideToken, BISHOP) | MASK_PIECE(sideToken, KNIGHT) | \
< 	 MASK_PIECE(sideToken, ROOK) | MASK_PIECE(sideToken, PAWN))
< #define Mask_Piece(side, type) BITBOARD[side][type]
< #define Mask_Type(type) \
< 	(Mask_Piece(PIECE_SIDE_INDEX_WHITE, type) | \
< 	 Mask_Piece(PIECE_SIDE_INDEX_BLACK, type))
< 
---
> #define MASK_INDEX_0 1ULL
> #define MASK_EMPTY 0ULL
> #define MASK_INDEX(index) (MASK_INDEX_0 << (index))
> #define MASK_ALL(bitboardSet) (MASK_SIDE(bitboardSet, BLACK) | MASK_SIDE(bitboardSet, WHITE))
> #define MASK_PIECE(bitboardSet, sideToken, typeToken) \
> 	Mask_Piece(bitboardSet, \
> 		PIECE_SIDE_INDEX_##sideToken, \
> 		PIECE_TYPE_INDEX_##typeToken)
> #define MASK_TYPE(bitboardSet, typeToken) Mask_Type(bitboardSet, PIECE_TYPE_INDEX_##typeToken)
> #define MASK_SIDE(bitboardSet, sideToken) \
> 	Mask_Side(bitboardSet, PIECE_SIDE_INDEX_##sideToken)
> #define Mask_Piece(bitboardSet, side, type) bitboardSet[side][type]
> #define Mask_Type(bitboardSet, type) \
> 	(Mask_Piece(bitboardSet, PIECE_SIDE_INDEX_WHITE, type) | \
> 	 Mask_Piece(bitboardSet, PIECE_SIDE_INDEX_BLACK, type))
> #define Mask_Side(bitboardSet, side) \
> 	(Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_KING) | Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_QUEEN) | \
> 	 Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_BISHOP) | Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_KNIGHT) | \
> 	 Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_ROOK) | Mask_Piece(bitboardSet, side, PIECE_TYPE_INDEX_PAWN))
121,122c127,128
< #define Piece_HasType(index, type) (Piece_GetType(index) == type)
< #define Piece_HasColor(index, color) (Piece_GetColor(index) == color)
---
> #define Piece_HasType(index, type) (Piece_GetType(index) == (type))
> #define Piece_HasColor(index, color) (Piece_GetColor(index) == (color))
168c174
< 		Bitboard_Print(MASK_TYPE(typeToken)); \
---
> 		Bitboard_Print(MASK_TYPE(BITBOARD_SET, typeToken)); \
172c178
< 		Bitboard_Print(MASK_SIDE(sideToken)); \
---
> 		Bitboard_Print(MASK_SIDE(BITBOARD_SET, sideToken)); \
176c182
< 		Bitboard_Print(MASK_PIECE(sideToken, typeToken)); \
---
> 		Bitboard_Print(MASK_PIECE(BITBOARD_SET, sideToken, typeToken)); \
193c199
< Bitboards_All BITBOARD;
---
> Bitboards_All BITBOARD_SET;
194a201
> uint64_t MASK_EN_PASSANT_TARGET = MASK_EMPTY;
198,199c205
< 	return !Piece_IsTypeIndex(index)
< 	&& Piece_HasSideIndex(index, ACTIVE_SIDE);
---
> 	return Piece_HasSideIndex(BITBOARD_SET, index, ACTIVE_SIDE);
202c208
< PieceSideIndex Piece_GetSideIndex(uint8_t index)
---
> PieceSideIndex Piece_GetSideIndex(Bitboards_All bitboardSet, uint8_t index)
205,206c211,212
< 	if (mask & MASK_SIDE(WHITE)) return PIECE_SIDE_INDEX_WHITE;
< 	if (mask & MASK_SIDE(BLACK)) return PIECE_SIDE_INDEX_BLACK;
---
> 	if (mask & MASK_SIDE(bitboardSet, WHITE)) return PIECE_SIDE_INDEX_WHITE;
> 	if (mask & MASK_SIDE(bitboardSet, BLACK)) return PIECE_SIDE_INDEX_BLACK;
211,218c217
< bool Piece_HasSideIndex(uint8_t index, PieceSideIndex side)
< {
< 	if (Piece_IsSideIndex(side)) 
< 		return Piece_GetSideIndex(index) == side;
< 	return false;
< }
< 
< PieceTypeIndex Piece_GetTypeIndex(uint8_t index)
---
> PieceTypeIndex Piece_GetTypeIndex(Bitboards_All bitboardSet, uint8_t index)
231c230
< 		if (mask & Mask_Type(types[i])) return i;
---
> 		if (mask & Mask_Type(bitboardSet, types[i])) return i;
279c278
< uint8_t BOARD[64] = {0};
---
> uint8_t BOARD[64];
281c280
< int8_t EN_PASSANT_INDEX = -1;
---
> int8_t EN_PASSANT_TARGET_INDEX = -1;
407c406
< 		BITBOARD[i][j] = 0ULL;
---
> 		BITBOARD_SET[i][j] = MASK_EMPTY;
424c423
< 			Bitboard_Put(row * 8 + col, PieceSideIndex_FromChar(c), PieceTypeIndex_FromChar(c));
---
> 			BitboardSet_Put(BITBOARD_SET, row * 8 + col, PieceSideIndex_FromChar(c), PieceTypeIndex_FromChar(c));
500c499
< 			EN_PASSANT_INDEX = file - 'a' + (7 - (rank - '1')) * 8;
---
> 			EN_PASSANT_TARGET_INDEX = file - 'a' + (7 - (rank - '1')) * 8;
547c546
< 	err_varn("%d", EN_PASSANT_INDEX);
---
> 	err_varn("%d", EN_PASSANT_TARGET_INDEX);
561,745d559
< /*
< int ChessInit_FromString(StringIndex fen)
< {
< 	
< 	StringIndex fieldIndexes[6] = {0};
< 	
< 	// FEN
< 	{
< 		uint8_t n_fields = 0, start_i = 0,  c = fen.chars[0], prev_c = 0;
< 		if (c == ' ') {
< 			err(return 1, "FEN can't have a leading space", {err_var("%c", c); err_var("%.*s", fen.chars, fen.length)});
< 		} 
< 		for (uint8_t i = 0; i < fen.length; i++, prev_c = c, c = fen.chars[i])
< 		{
< 			if (prev_c == ' ') start_i = i;
< 			if (c == ' ') {
< 				if (prev_c == ' ') {
< 					err(return 1, "double space in FEN", {err_var("%c", prev_c); err_var("%c", prev_c); err_var("%.*s", fen.chars, fen.length)});
< 				}
< 				continue;
< 			}
< 			if (i + 1 == fen.length || fen.chars[i + 1] == ' ') {
< 				fieldIndexes[n_fields] = (StringIndex){fen.chars + start_i, i - start_i + 1u};
< 				n_fields++;
< 				if (n_fields == 6) break;
< 			}
< 		}
< 		if (n_fields < 6) {
< 			err(return 1, "you have to provide for the 6 fields of FEN", {err_var("%d", n_fields); err_var("%.*s", fen.chars, fen.length)});
< 		}
< 	}
< 
< 	// FIELD 0
< 	{
< 		for (uint8_t i = 0; i < 64; i++)
< 		{
< 			BOARD[i] = PIECE_TYPE_NONE;
< 		}
< 		const StringIndex field = fieldIndexes[0];
< 		for (uint8_t i = 0, row = 0, col = 0; i < field.length; i++)
< 		{
< 			const char c = field.chars[i];
< 			if (c == '/') {
< 				row++; col = 0;
< 				continue; 
< 			}
< 			if (c >= '1' && c <= '8') {
< 				col += c - '1' + 1;
< 				continue;
< 			}
< 			if (PieceType_FromChar(c) == PIECE_TYPE_NONE) {
< 				err(return 1, "not a char for piece type", err_var("%c", c));
< 			}
< 			BOARD[row * 8 + col] = PieceType_FromChar(c) | PieceColor_FromChar(c);
< 			col++;
< 
< 			if (i + 1 == field.length || field.chars[i + 1] == '/') {
< 				if (col != 8) {
< 					err(return 1, "cols can only be exactly 8 before next row", {err_var("%d", col); err_var("%d", row);});
< 				}
< 			}
< 		}
< 	}
< 	
< 	// FIELD 1
< 	{
< 		const StringIndex field = fieldIndexes[1];
< 		if (field.length > 1) {
< 			err(return 1, "the field must be only 1 char", err_var("%.*s", field.chars, field.length));
< 		}
< 		const char c = field.chars[0];
< 		if (!ContainsChar(c, STRING("wb"))) {
< 			err(return 1, "not a char for piece color", err_var("%c", c));
< 		}
< 		ACTIVE_COLOR = c == 'w' ? PIECE_COLOR_WHITE : PIECE_COLOR_BLACK;
< 	}
< 
< 	// FIELD 2
< 	{
< 		const StringIndex field = fieldIndexes[2];
< 		if (ContainsChar('-', field)) {
< 			if (field.length != 1) {
< 				err(return 1, "It must only contain '-' if it has the char '-'", err_var("%.*s", field.chars, field.length));
< 			}
< 		} else {
< 			const StringIndex castlingSides = STRING("KQkq");
< 			for (uint8_t i = 0; i < field.length; i++)
< 			{
< 				const char c = field.chars[i];
< 				if (!ContainsChar(c, castlingSides)) {
< 					err(return 1, "chars must be one of castling sides", {err_var("%.*s", field.chars, field.length); err_var("%c", c);});
< 				}
< 				switch (c) {
< 				case 'K': CASTLING_SIDES.whiteKing = true; break;
< 				case 'Q': CASTLING_SIDES.whiteQueen = true; break;
< 				case 'k': CASTLING_SIDES.blackKing = true; break;
< 				case 'q': CASTLING_SIDES.blackQueen = true; break;
< 				}
< 			}
< 			for (uint8_t i = 0; i < castlingSides.length; i++)
< 			{
< 				if (CountChar(castlingSides.chars[i], field) > 1) {
< 					err(return 1, "castling side chars can only appear once", err_var("%.*s", field.chars, field.length));
< 				}
< 			}
< 		}
< 	}
< 	
< 	// FIELD 3
< 	{
< 		const StringIndex field = fieldIndexes[3];
< 		if (ContainsChar('-', field)) {
< 			if (field.length != 1) {
< 				err(return 1, "it must only contain '-' if it has the char '-'", err_var("%.*s", field.chars, field.length));
< 			}
< 		} else {
< 			if (field.length != 2) {
< 				err(return 1, "it requires exactly two chars to represent en passant target square", err_var("%.*s", field.chars, field.length));
< 			}
< 			const char file = field.chars[0];
< 			const StringIndex files = STRING("abcdefgh");
< 			if (!ContainsChar(file, files)) {
< 				err(return 1, "does not represent a file", {err_var("%c", file); err_var("%.*s", files.chars, files.length)});
< 			}
< 			const char rank = field.chars[1];
< 			const StringIndex ranks = STRING("12345678");
< 			if (!ContainsChar(rank, ranks)) {
< 				err(return 1, "does not represent a rank", {err_var("%c", rank); err_var("%.*s", ranks.chars, ranks.length)});
< 			}
< 			EN_PASSANT_INDEX = file - 'a' + (7 - (rank - '1')) * 8;
< 		}
< 	}
< 	
< 	// FIELD 4 and 5
< 	{
< 		uint32_t numbers[2] = {0};
< 		const StringIndex digits = STRING("0123456789");
< 		for (uint8_t j = 0; j < 2; j++)
< 		{
< 			const StringIndex field = fieldIndexes[j + 4];
< 			if (field.chars[0] == '0' && field.length > 1) {
< 				err(return 1, "there can't be leading zeroes if it's not zero", err_var("%.*s", field.chars, field.length));
< 			}
< 			uint32_t offset = 1;
< 			for (uint8_t i = 0; i < field.length; i++, offset *= 10)
< 			{
< 				const char c = field.chars[field.length - i - 1];
< 				if (!ContainsChar(c, digits)) {
< 					err(return 1, "a char must be a digit", {err_var("%.*s", field.chars, field.length); err_var("%c", c);});
< 				}
< 				numbers[j] += (c - '0') * offset;
< 			}
< 		}
< 		HALF_MOVE_COUNTER = numbers[0];
< 		FULL_MOVE_COUNTER = numbers[1];
< 		if (FULL_MOVE_COUNTER < 1) {
< 			err(return 1, "full move counter must be greater than zero", err_var("%d", FULL_MOVE_COUNTER));
< 		}
< 	}
< 	
< 	#ifdef CHESS_VERBOSE
< 	for (uint8_t i = 0; i < 6; i++)
< 	{
< 		err_varn("%.*s", fieldIndexes[i].chars, fieldIndexes[i].length);
< 	}
< 	for (uint8_t i = 0; i < 64; i++)
< 	{
< 		if (i % 8 == 0) printf("\n");
< 		printf(" %2d", BOARD[i]);
< 		if (i == 63) printf("\n");
< 	}
< 	err_varn("%d", ACTIVE_COLOR);
< 	err_varn("%d", CASTLING_SIDES.blackKing);
< 	err_varn("%d", CASTLING_SIDES.blackQueen);
< 	err_varn("%d", CASTLING_SIDES.whiteKing);
< 	err_varn("%d", CASTLING_SIDES.whiteQueen);
< 	err_varn("%d", EN_PASSANT_INDEX);
< 	err_varn("%d", HALF_MOVE_COUNTER);
< 	err_varn("%d", FULL_MOVE_COUNTER);
< 	#endif // CHESS_VERBOSE
< 	
< 	return 0;
< }
< */
< 
